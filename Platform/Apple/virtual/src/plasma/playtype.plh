///////////////////////////////////////////////////////////////////////////////////////////////////
// Structures for the heap

const TYPE_GLOBAL = $80
struc Global
  byte t_type
  word p_players
  word p_enemyGroups
  word p_combatFirst
end
byte typeTbl_Global[] = Global, p_players, p_enemyGroups, p_combatFirst, 0

const PLAYER_FLAG_NPC  = $01

const TYPE_PLAYER = $81
struc Player
  byte t_type
  word p_nextObj
  word s_name
  byte b_combatOrder
  word p_combatNext
  word w_health

  // Innate attributes
  byte b_intelligence
  byte b_strength
  byte b_agility
  byte b_bravery
  byte b_stamina
  byte b_charisma
  byte b_spirit

  // Calculated attributes
  byte b_armor

  // Basic skills
  byte b_aiming
  byte b_dodging
  byte b_wilderness

  // Status
  word w_maxHealth
  byte b_combatChoice
  byte b_playerFlags

  // Lists
  word p_skills  // list:Modifier
  word p_items   // list:Item
  word p_buffs   // list:Effect
  word p_debuffs // list:Effect
end
byte typeTbl_Player[] = Player, p_nextObj, s_name, p_combatNext, p_skills, p_items, p_buffs, p_debuffs, 0

// Combat skills, weapon modifiers, etc.
const TYPE_MODIFIER = $82
struc Modifier
  byte t_type
  word p_nextObj
  byte b_modKind
  byte b_modValue
end
byte typeTbl_Modifier[] = Modifier, p_nextObj, 0

// Buffs and debuffs, that last until a specified time
const TYPE_EFFECT = $83
struc Effect
  byte t_type
  word p_nextObj
  byte b_modKind
  byte b_modValue
  word s_effectDescrip
  word w_endTurn
end
byte typeTbl_Effect[] = Effect, p_nextObj, s_effectDescrip, 0

const TYPE_ITEM = $84
struc Item
  byte t_type
  word p_nextObj
  word s_name
  byte b_itemKind
  word w_cost
  word p_modifiers  // list:modifier
end
byte typeTbl_Item[] = Item, p_nextObj, s_name, p_modifiers, 0

const WEAPON_FLAG_SINGLE_USE  = $01
const WEAPON_FLAG_WHOLE_GROUP = $02

const TYPE_WEAPON = $85
struc Weapon
  // Item properties
  byte t_type
  word p_nextObj
  word s_name
  byte b_itemKind
  word w_cost
  word p_modifiers  // list:modifier
  // Usables properties
  byte b_maxUses
  byte b_curUses
  // Weapon properties
  byte b_weaponFlags    // WEAPON_FLAG_* above
  byte b_ammoKind
  byte b_clipSize
  byte b_clipCurrent
  word r_meleeDmg       // 3 hex digits: num dice, die size, add. E.g. $361 = 3d6+1
  word r_projectileDmg  // ditto
  byte ba_attacks[3]    // each is: 0=none, 1=single, 2=double, 3+ = multi-shot
  byte b_weaponRange
  word s_combatText
end
byte typeTbl_Weapon[] = Weapon, p_nextObj, s_name, p_modifiers, s_combatText, 0

const TYPE_ARMOR = $86
struc Armor
  // General item properties
  byte t_type
  word p_nextObj
  word s_name
  byte b_itemKind
  word w_cost
  word p_modifiers  // list:modifier
  // Usables properties
  byte b_maxUses
  byte b_curUses
  // Armor properties
  byte b_armorValue
end
byte typeTbl_Armor[] = Armor, p_nextObj, s_name, p_modifiers, 0

// Countable things, e.g. ammo and pelts
const TYPE_STUFF = $87
struc Stuff
  // General item properties
  byte t_type
  word p_nextObj
  word s_name
  byte b_itemKind
  word w_cost
  // Stuff properties
  word w_count
  word w_maxCount
end
byte typeTbl_Stuff[] = Stuff, p_nextObj, s_name, 0

const TYPE_ENEMY = $88
struc Enemy
  byte t_type
  word p_nextObj
  word s_name
  byte b_combatOrder
  word p_combatNext
  word w_health

  byte ba_images[2]
  byte b_hitBonus
  byte b_attackType   // 1=melee, 2=projectile
  word s_attackText
  byte b_enemyAttackRange
  byte b_chanceToHit
  word r_enemyDmg     // 3 hex digits: num dice, die size, add. E.g. $361 = 3d6+1
  word r_groupSize    // number encountered, as 3 hex digits for dice
  word r_initialRange
end
byte typeTbl_Enemy[] = Enemy, p_nextObj, s_name, p_combatNext, s_attackText, 0

const TYPE_ENEMY_GROUP = $89
struc EnemyGroup
  byte t_type
  word p_nextObj
  word p_enemies
  byte b_enemyGroupRange
end
byte typeTbl_EnemyGroup[] = EnemyGroup, p_nextObj, p_enemies, 0

// Weapon kinds
const KIND_BOW          = 1;  byte[] kind_bow_str           = "bow(s)"
const KIND_BLADE        = 2;  byte[] kind_blade_str         = "blade(s)"
const KIND_EXPLOSIVE    = 3;  byte[] kind_explosive_str     = "explosive(s)"
const KIND_HANDGUN      = 4;  byte[] kind_handgun_str       = "handgun(s)"
const KIND_HAND_TO_HAND = 5;  byte[] kind_hand_to_hand_str  = "hand to hand"
const KIND_RIFLE        = 6;  byte[] kind_rifle_str         = "rifle(s)"
const KIND_THROWING     = 7;  byte[] kind_throwing_str      = "throwing"
// Skill kinds
const KIND_MINING       = 8;  byte[] kind_mining_str        = "mining"
const KIND_NATIVE_BOND  = 9;  byte[] kind_native_bond_str   = "native bond"
const KIND_PYRE_WARE    = 10; byte[] kind_pyre_ware_str     = "pyre ware"
// Ammo kinds
const KIND_BULLET       = 11; byte[] kind_bullet_str        = "bullet(s)"
const KIND_ARROW        = 12; byte[] kind_arrow_str         = "arrow(s)"
const KIND_BUCK         = 13; byte[] kind_buck_str          = "buck"
const KIND_QUARREL      = 14; byte[] kind_quarrel_str       = "quarrel(s)"
// Armor kinds
const KIND_SHOES        = 15; byte[] kind_shoes_str         = "shoes"
const KIND_COAT         = 16; byte[] kind_coat_str          = "coat(s)"
const KIND_HAT          = 17; byte[] kind_hat_str           = "hat(s)"
const KIND_PANTS        = 18; byte[] kind_pants_str         = "pants"
const KIND_SHIRT        = 19; byte[] kind_shirt_str         = "shirt(s)"
const KIND_GLOVES       = 20; byte[] kind_gloves_str        = "gloves"
const KIND_SHIELD       = 21; byte[] kind_shield_str        = "shield(s)"

// Text table for translating a kind to a string
word[] kinds = @kind_bow_str, @kind_blade_str, @kind_explosive_str, @kind_handgun_str, @kind_hand_to_hand_str, @kind_rifle_str, @kind_throwing_str
word         = @kind_mining_str, @kind_native_bond_str, @kind_pyre_ware_str
word         = @kind_bullet_str, @kind_arrow_str, @kind_buck_str, @kind_quarrel_str
word         = @kind_shoes_str, @kind_coat_str, @kind_hat_str, @kind_pants_str, @kind_shirt_str, @kind_gloves_str, @kind_shield_str
word         = NULL
